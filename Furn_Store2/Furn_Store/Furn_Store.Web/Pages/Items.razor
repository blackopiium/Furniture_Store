@page "/items"
@inject Services.ItemsService itemService
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment _appEnviroment
@using Microsoft.AspNetCore.Hosting;
@using Furn_Store.Data.Parameters;
@using Furn_Store.Web.ViewModels; 
<h3>Items</h3>
<MatBlazor.MatPaginator PageSize="@pageSize" Page="@OnPage"></MatBlazor.MatPaginator>
@if (items == null)
{
    <p><em>Null</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Description</th>
                <th>CategoryId</th>
                <th>Price</th>
                <th>FactoryId</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.CategoryId</td>
                    <td>@item.Price</td>
                    <td>@item.FactoryId</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    int pageSize = 30;
    int pageIndex = 0;
    float minPrice = 0;
    float maxPrice = float.MaxValue;

    List<ItemViewModel> items;
    protected override async Task OnInitializedAsync()
    {
        ItemParameters parameters = new ItemParameters
        {
            PageNumber = pageIndex + 1,
            PageSize = pageSize,
            maxPrice = float.MaxValue,
            minPrice = 0
        };
        items = await itemService.GetAllItems(parameters);
    }
    protected async Task OnPage(MatBlazor.MatPaginatorPageEvent e)
    {
        items = await itemService.GetAllItems(new ItemParameters
        {
            PageNumber = e.PageIndex + 1,
            PageSize = e.PageSize,
            minPrice = minPrice,
            maxPrice = maxPrice
        });
        pageSize = e.PageSize;
        pageIndex = e.PageIndex;

    }
}
